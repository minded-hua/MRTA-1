// Generated by gencpp from file mrta/ScheduledTasks.msg
// DO NOT EDIT!


#ifndef MRTA_MESSAGE_SCHEDULEDTASKS_H
#define MRTA_MESSAGE_SCHEDULEDTASKS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrta/Task.h>

namespace mrta
{
template <class ContainerAllocator>
struct ScheduledTasks_
{
  typedef ScheduledTasks_<ContainerAllocator> Type;

  ScheduledTasks_()
    : robot_id(0)
    , tasks()
    , makespan(0)
    , travel_time(0.0)  {
    }
  ScheduledTasks_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , tasks(_alloc)
    , makespan(0)
    , travel_time(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _robot_id_type;
  _robot_id_type robot_id;

   typedef std::vector< ::mrta::Task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mrta::Task_<ContainerAllocator> >::other >  _tasks_type;
  _tasks_type tasks;

   typedef int32_t _makespan_type;
  _makespan_type makespan;

   typedef float _travel_time_type;
  _travel_time_type travel_time;





  typedef boost::shared_ptr< ::mrta::ScheduledTasks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrta::ScheduledTasks_<ContainerAllocator> const> ConstPtr;

}; // struct ScheduledTasks_

typedef ::mrta::ScheduledTasks_<std::allocator<void> > ScheduledTasks;

typedef boost::shared_ptr< ::mrta::ScheduledTasks > ScheduledTasksPtr;
typedef boost::shared_ptr< ::mrta::ScheduledTasks const> ScheduledTasksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrta::ScheduledTasks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrta::ScheduledTasks_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mrta

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mrta': ['/home/kimwang/Desktop/project/MRTA/catkin_ws/src/mrta/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mrta::ScheduledTasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrta::ScheduledTasks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::ScheduledTasks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrta::ScheduledTasks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::ScheduledTasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrta::ScheduledTasks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrta::ScheduledTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a0dfcdd660c4e0812362731470f2461";
  }

  static const char* value(const ::mrta::ScheduledTasks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a0dfcdd660c4e08ULL;
  static const uint64_t static_value2 = 0x12362731470f2461ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrta::ScheduledTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrta/ScheduledTasks";
  }

  static const char* value(const ::mrta::ScheduledTasks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrta::ScheduledTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 robot_id\n\
Task[] tasks\n\
int32 makespan\n\
float32 travel_time\n\
================================================================================\n\
MSG: mrta/Task\n\
int32 id\n\
int32 start_time\n\
int32 finish_time\n\
int32 est\n\
int32 lst\n\
int32 eft\n\
int32 lft\n\
int32 duration\n\
int32[2] location\n\
";
  }

  static const char* value(const ::mrta::ScheduledTasks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrta::ScheduledTasks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.tasks);
      stream.next(m.makespan);
      stream.next(m.travel_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScheduledTasks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrta::ScheduledTasks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrta::ScheduledTasks_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "tasks[]" << std::endl;
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      s << indent << "  tasks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mrta::Task_<ContainerAllocator> >::stream(s, indent + "    ", v.tasks[i]);
    }
    s << indent << "makespan: ";
    Printer<int32_t>::stream(s, indent + "  ", v.makespan);
    s << indent << "travel_time: ";
    Printer<float>::stream(s, indent + "  ", v.travel_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRTA_MESSAGE_SCHEDULEDTASKS_H
